# Задание 1
import math

def carpet_fit(size):
    A, B = map(int, size.split('x'))  # Разделяем входные данные на A и B
    diameter = 13
    diagonal = math.sqrt(A**2 + B**2)  # диагональ ковра

    if diagonal <= diameter:
        return "да"
    else:
        return "нет"

size_input = input("Введите размер ковровой дорожки (A x B): ")
result = carpet_fit(size_input)
print(result)

# Задание 2
# Вводим размеры отверстия
hole = input("Введите размер отверстия (AxB): ")
A, B = map(int, hole.split('x'))

# Вводим размеры кирпича
brick = input("Введите размер кирпича (CxDxE): ")
C, D, E = map(int, brick.split('x'))

# Проверяем, можно ли протолкнуть кирпич через отверстие
# Кирпич можно протолкнуть, если хотя бы одна из его сторон меньше или равна отверстию
if (C <= A and D <= B) or (C <= B and D <= A):  # Первая ориентация
    print("да")
elif (C <= A and E <= B) or (C <= B and E <= A):  # Вторая ориентация
    print("да")
elif (D <= A and E <= B) or (D <= B and E <= A):  # Третья ориентация
    print("да")
else:
    print("нет")
    
# Задание 3
# Подсказка для ввода
print("Введите размеры района в формате NxM:")
print("Пример: 4x2")

# Ввод размеров района
size_input = input().strip()  # Читаем размеры района
N, M = map(int, size_input.split('x'))  # Разделяем на N и M

# Подсказка для ввода K
print("Введите количество кварталов K:")
print("Пример: 6")

# Ввод количества кварталов
K = int(input().strip())  # Читаем K

# Проверка условий
if K <= N * M and (K % N == 0 or K % M == 0):
    print("Результат: успешно")
else:
    print("Результат: неосуществимо")

# Задание 4
# Вводим координаты клетки (например, a1, b2, c3 и т.д.)
cell = input("Введите координаты клетки: ")

# Определяем цвет клетки
if (ord(cell[0]) + int(cell[1])) % 2 == 0:
    print("чёрный")
else:
    print("белый")

# Задание 5
# Вводим ход коня (например, a1-b3)
start, end = input("Введите ход коня: ").split('-')

# Проверяем, является ли ход правильным для коня
if abs(ord(start[0]) - ord(end[0])) == 2 and abs(int(start[1]) - int(end[1])) == 1 or \
   abs(ord(start[0]) - ord(end[0])) == 1 and abs(int(start[1]) - int(end[1])) == 2:
    print("верно")
else:
    print("ошибка")

# Задание 6
# Вводим N, K, M
N, K, M = map(int, input("Введите N K M: ").split())

# Вычисляем количество сеансов
total_rides = 2 * N  # Общее количество поездок
sessions = (total_rides + K - 1) // K  # Округление вверх

# Вычисляем общее время
total_time = sessions * M

# Выводим результат
print(total_time)

# Задание 7
K = int(input("Введите количество суши: "))

# Проверяем, можно ли заказать K штук суши
found = False
for y in range(K // 7 + 1):
    if (K - 7 * y) % 5 == 0:
        found = True
        break

# Выводим результат
print("да" if found else "нет")

# Задание 8
n = int(input("Введите порядковый номер: "))

# Генерируем последовательность цифр
sequence = []
for number in range(0, 201):  # От 0 до 200 включительно
    for digit in str(number):  # Разбиваем число на цифры
        sequence.append(int(digit))  # Добавляем цифру в последовательность
    if len(sequence) >= n:  # Если последовательность достаточно длинная, останавливаемся
        break

# Выводим цифру по порядковому номеру
print(sequence[n - 1])  # Индексация с 0, поэтому n - 1

# Задание 9
import math

# Ввод данных
x1, y1 = map(float, input("Введите координаты центра первой окружности (x1 y1): ").split())
r1 = float(input("Введите радиус первой окружности: "))

x2, y2 = map(float, input("Введите координаты центра второй окружности (x2 y2): ").split())
r2 = float(input("Введите радиус второй окружности: "))

# Вычисляем расстояние между центрами
distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

# Определяем относительное расположение
if distance > r1 + r2:
    print("Окружности лежат одна вне другой, не касаясь")
elif distance == r1 + r2:
    print("Окружности имеют внешнее касание")
elif abs(r1 - r2) < distance < r1 + r2:
    print("Окружности пересекаются")
elif distance == abs(r1 - r2):
    print("Окружности имеют внутреннее касание")
else:
    print("Одна окружность лежит внутри другой, не касаясь")

# Задание 10
# Ввод данных для первого прямоугольника
x1_1, y1_1 = map(float, input("Введите координаты верхней левой вершины первого прямоугольника (x1 y1): ").split())
x2_1, y2_1 = map(float, input("Введите координаты правой нижней вершины первого прямоугольника (x2 y2): ").split())

# Ввод данных для второго прямоугольника
x1_2, y1_2 = map(float, input("Введите координаты верхней левой вершины второго прямоугольника (x1 y1): ").split())
x2_2, y2_2 = map(float, input("Введите координаты правой нижней вершины второго прямоугольника (x2 y2): ").split())

# Проверка пересечения по оси X
x_overlap = not (x2_1 < x1_2 or x2_2 < x1_1)

# Проверка пересечения по оси Y
y_overlap = not (y2_1 > y1_2 or y2_2 > y1_1)

# Проверка касания по оси X
x_touch = (x2_1 == x1_2 or x2_2 == x1_1)

# Проверка касания по оси Y
y_touch = (y2_1 == y1_2 or y2_2 == y1_1)

# Проверка вложенности
inside = (x1_1 >= x1_2 and y1_1 <= y1_2 and x2_1 <= x2_2 and y2_1 >= y2_2) or \
         (x1_2 >= x1_1 and y1_2 <= y1_1 and x2_2 <= x2_1 and y2_2 >= y2_1)

# Определение относительного расположения
if inside:
    print("Один прямоугольник лежит внутри другого, не касаясь")
elif x_overlap and y_overlap:
    print("Прямоугольники имеют пересечение")
elif (x_overlap and y_touch) or (y_overlap and x_touch):
    print("Прямоугольники имеют касание")
else:
    print("Прямоугольники лежат вне друг друга, не касаясь")
